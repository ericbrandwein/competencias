#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PoisonedSwamp {
public:

	bool possible(vector<string>& swamp, vector<vector<vector<int>>>& dp, int y, int x, int poison) {
		if (poison >= 10 || y >= swamp.size() || x >= swamp[0].size()) return false;
		if (dp[y][x][poison] != -1) return dp[y][x][poison];
		if (swamp[y][x] == '#') return false;
		int new_poison = poison;
		if (swamp[y][x] > '0' && swamp[y][x] <= '9') {
			new_poison += swamp[y][x] - '0';
		} else if (swamp[y][x] == 'S') {
			new_poison = 0;
		}
		return dp[y][x][poison] =
			possible(swamp, dp, y + 1, x, new_poison) && possible(swamp, dp, y, x+1, new_poison);
		
	}
	
	string cross(vector <string> swamp) {
		vector<vector<vector<int>>> can_cross(swamp.size(), vector<vector<int>>(swamp[0].size(), vector<int>(10, -1)));
		
		for (int i = 0; i < 10; i++) {
			can_cross[swamp.size() - 1][swamp[0].size() - 1][i] = true;
		}
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PoisonedSwamp *obj;
	string answer;
	obj = new PoisonedSwamp();
	clock_t startTime = clock();
	answer = obj->cross(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {".....","####.",".....",".####","....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "possible";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".....","####.","97...","9#2##","97..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "possible";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".111111111.",".#########.","..22222...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "possible";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".#222#111","4#S#2#1#S","4#3#S#1#9","S33#111#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "possible";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"..111111111111..","###############."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "impossible";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"..111111111111..","#######S#######."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "possible";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"..#.#.","..#.#.","#5#.5.","....#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "impossible";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {".1.#.",".9.#.",".###.","2#.1.",".#.7."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "impossible";
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
